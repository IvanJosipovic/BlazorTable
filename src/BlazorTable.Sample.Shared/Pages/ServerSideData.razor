@page "/ServerSideData"
@inject HttpClient Http
@using BlazorTable
@using BlazorTable.Interfaces
@using BlazorTable.Components.ServerSide

<h1>Server side data</h1>

Selected: @(selectedItems.Any() ? selectedItems.Select(x => x.full_name).Aggregate((c, n) => $"{c},{n}") : "None")

<Table TableItem="PersonData" @ref="Table" DataLoader="_loader" Items="data" PageSize="15" ShowSearchBar="true" SelectionType="SelectionType.Multiple" SelectedItems="selectedItems" RowClickAction="RowClick">
    <Column TableItem="PersonData" Title="Id" Field="@(x => x.id)" Sortable="true" Width="10%" DefaultSortColumn="true" Filterable="true" />
    <Column TableItem="PersonData" Title="Full Name" Field="@(x => x.full_name)" Sortable="true" Width="20%" Filterable="true">
        <CustomIFilters>
            <CustomSelect TableItem="PersonData">
                <CustomSelectOption Key="Astrix Mariette" Value="@("Astrix Mariette")" />
                <CustomSelectOption Key="Marja Mustill" Value="@("Marja Mustill")" />
                <CustomSelectOption Key="Creighton Keyzman" Value="@("Creighton Keyzman")" />
                <CustomSelectOption Key="Jacobo Linton" Value="@("Jacobo Linton")" />
                <CustomSelectOption Key="Michael O'Dyvoy" Value="@("Michael O'Dyvoy")" />
            </CustomSelect>
        </CustomIFilters>
    </Column>
    <Column TableItem="PersonData" Title="Email" Field="@(x => x.email)" Sortable="true" Width="20%">
        <Template>
            <a href="mailto:@context.email">@context.email</a>
        </Template>
    </Column>
    <Column TableItem="PersonData" Title="Paid" Field="@(x => x.paid)" Sortable="true" Width="10%" Filterable="true">
        <Template>
            @context.paid.ToString()
        </Template>
    </Column>
    <Column TableItem="PersonData" Title="Price" Field="@(x => x.price)" Sortable="true" Width="10%" Format="C" Align="Align.Right" />
    <Column TableItem="PersonData" Title="Created Date" Field="@(x => x.created_date)" Sortable="true" Width="10%">
        <Template>
            @(context.created_date.HasValue ? context.created_date.Value.ToShortDateString() : string.Empty)
        </Template>
    </Column>
    <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageNumberSelector="true" ShowPageSizes="true" ShowPageNumberInput="true" />
</Table>

@code
{
    [Inject]
    private HttpClient httpClient { get; set; }

    private ITable<PersonData> Table;

    public class PersonData
    {
        public int? id { get; set; }
        public string full_name { get; set; }
        public string email { get; set; }
        public bool? paid { get; set; }
        public decimal? price { get; set; }
        public DateTime? created_date { get; set; }
    }

    private IDataLoader<PersonData> _loader;

    private IEnumerable<PersonData> data;

    private List<PersonData> selectedItems = new List<PersonData>();

    protected override async Task OnInitializedAsync()
    {
        _loader = new PersonDataLoader(httpClient);
        data = (await _loader.LoadDataAsync(null)).Records;

        await Table.SetInitialFiltersAsync(new List<FilterString>()
        {
            new FilterString()
            {
                Condition = StringCondition.IsEqualTo.ToString(),
                Field = nameof(PersonData.full_name),
                FilterValue = "Marja Mustill"
            },
            new FilterString()
            {
                Condition = BooleanCondition.True.ToString(),
                Field = nameof(PersonData.paid)
            } 
        });
        
    }

    public void RowClick(PersonData data)
    {
        StateHasChanged();
    }

    public class PersonDataLoader : IDataLoader<PersonData>
    {
        private readonly HttpClient _client;
        public PersonDataLoader(HttpClient client)
        {
            _client = client;
        }
        public async Task<PaginationResult<PersonData>> LoadDataAsync(FilterData<PersonData> parameters)
        {

            var data = await _client.GetFromJsonAsync<PersonData[]>("sample-data/MOCK_DATA.json");
            IQueryable<PersonData> query = data.AsQueryable();
            if (parameters?.Query != null)
            {
                query = query.Where(
                    x => x.email.ToLowerInvariant().Contains(parameters.Query.ToLowerInvariant()) ||
                         x.full_name.ToLowerInvariant().Contains(parameters.Query.ToLowerInvariant()));
            }
            if (parameters?.OrderBy != null)
            {
                var orderBy = parameters.OrderBy.Split(" ");
                if (orderBy.Length == 2)
                {
                    var isSortDescending = orderBy[1] == "desc";
                    var prop = typeof(PersonData).GetProperty(orderBy[0]);
                    query = isSortDescending ? query.OrderByDescending(x => prop.GetValue(x, null))
                        : query.OrderBy(x => prop.GetValue(x, null));
                }
            }
            if(parameters?.Filters != null)
            {
                foreach (var filter in parameters?.Filters)
                {
                    query = query.Where(filter);
                }    
            }
            var results = parameters?.Top.HasValue ?? false ?
                query.Skip(parameters.Skip.GetValueOrDefault())
                .Take(parameters.Top.Value).ToArray() :
                query.ToArray();

            return new PaginationResult<PersonData>
            {
                Records = results,
                Skip = parameters?.Skip ?? 0,
                Total = query.ToList().Count,
                Top = parameters?.Top ?? 0
            };
        }
    }

    

}
